---
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import Header from '../../components/Header.astro';
import SearchModal from '../../components/SearchModal.astro';
import Backlinks from '../../components/Backlinks.astro';
import PaneStack from '../../components/PaneStack.astro';
import '../../styles/design-system.css';
import '../../styles/notes.css';

export async function getStaticPaths() {
	const notes = await getCollection('notes', ({ data }) => data.visibility === 'public');
	return notes.map((note) => ({
		params: { slug: note.slug },
		props: { entry: note },
	}));
}

interface Props {
	entry: CollectionEntry<'notes'>;
}

const { entry } = Astro.props;
const { Content } = await entry.render();
const { slug, data } = entry;
const title = data.title ?? slug;
---
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>{title} | Commune</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="description" content={data.summary || title} />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
  </head>
  <body>
    <Header />
    <SearchModal />
    <main class="note">
      <article class="prose">
        <h1>{title}</h1>
        <Content />
      </article>
      <Backlinks slug={`/notes/${slug}/`} title={title} />
    </main>
    <PaneStack />
    <script>
      // Note preview functionality (inline for compatibility)
      const cache = new Map();
      
      function setupNotePreviews(){
        const show = (el, html, x, y) => {
          let card = document.getElementById('note-hover');
          if(!card){
            card = document.createElement('div');
            card.id = 'note-hover';
            card.style.position = 'fixed';
            card.style.maxWidth = '420px';
            card.style.background = 'var(--c-bg)';
            card.style.boxShadow = 'var(--c-shadow-xl)';
            card.style.border = '1px solid var(--c-border)';
            card.style.borderRadius = 'var(--c-radius-lg)';
            card.style.padding = '1rem 1.2rem';
            card.style.zIndex = 'var(--z-hover)';
            card.style.pointerEvents = 'none';
            card.style.transition = 'opacity 0.15s ease';
            document.body.appendChild(card);
          }
          card.innerHTML = html;
          card.style.left = Math.min(x+16, window.innerWidth-460) + 'px';
          card.style.top = Math.min(y+16, window.innerHeight-220) + 'px';
          card.hidden = false;
        };
        const hide = () => {
          const card = document.getElementById('note-hover');
          if (card) card.hidden = true;
        };

        document.addEventListener('mouseover', async (e) => {
          const a = e.target?.closest?.('a[href^="/notes/"]');
          if(!a) return;
          const url = a.getAttribute('href');
          if(cache.has(url)){ show(a, cache.get(url), e.clientX, e.clientY); return; }
          try{
            const r = await fetch(url);
            const t = await r.text();
            const doc = new DOMParser().parseFromString(t, 'text/html');
            const main = doc.querySelector('main') ?? doc.body;
            const paras = Array.from(main.querySelectorAll('p')).slice(0,3).map(p => p.outerHTML).join('');
            const html = `<div style="font-weight:600;margin-bottom:.3rem">${doc.title?.replace(/ \|.*/,'')}</div>${paras}`;
            cache.set(url, html);
            show(a, html, e.clientX, e.clientY);
          }catch{}
        });
        document.addEventListener('mouseout', (e) => {
          const a = e.target?.closest?.('a[href^="/notes/"]');
          if(a) setTimeout(hide, 120);
        });
      }

      // Pane stack functionality (inline for compatibility)
      function setupPanes(){
        const stack = document.getElementById('pane-stack');
        if(!stack) return;

        function activateStack(on){
          stack.classList.toggle('active', on);
          document.body.classList.toggle('panes-open', on);
        }

        async function openPane(url){
          activateStack(true);

          const res = await fetch(url, { headers: { 'Accept':'text/html;charset=utf-8' } });
          const html = await res.text();
          const doc = new DOMParser().parseFromString(html, 'text/html');
          const main = doc.querySelector('main') ?? doc.body;

          const pane = document.createElement('div');
          pane.className = 'pane';
          pane.innerHTML = `
            <header><strong>${doc.title?.replace(/ \|.*/,'')}</strong>
              <button class="close" aria-label="Close">Ã—</button>
            </header>
            <div class="body"><article class="prose">${main.innerHTML}</article></div>`;

          pane.querySelector('.close').addEventListener('click', () => {
            pane.remove();
            if(!stack.querySelector('.pane')) activateStack(false);
          });

          stack.appendChild(pane);
          stack.scrollLeft = stack.scrollWidth;

          const panes = stack.querySelectorAll('.pane');
          if(panes.length > 3) panes[0].remove();
        }

        // Only intercept clicks inside the main article area
        document.addEventListener('click', (e) => {
          const inArticle = e.target?.closest?.('main, article.prose');
          if (!inArticle) return;

          const a = e.target?.closest?.('a[href^="/notes/"]');
          if(!a) return;
          if (e.ctrlKey || e.metaKey || e.shiftKey) return;
          if (window.innerWidth < 1024) return;

          e.preventDefault();
          openPane(a.href);
          history.pushState({ pane: a.href }, '', a.href);
        });

        addEventListener('popstate', () => {
          const panes = stack.querySelectorAll('.pane');
          if(panes.length){
            panes[panes.length-1].remove();
            if(!stack.querySelector('.pane')) activateStack(false);
          }
        });
      }

      setupNotePreviews();
      setupPanes();
    </script>
  </body>
</html>

<style>
  .note{
    max-width:860px;
    margin:var(--c-space-xl) auto;
    padding:0 var(--c-space-md) 6rem;
    transition:opacity 0.2s ease, filter 0.2s ease;
  }
  /* Dim main content when panes are open */
  body.panes-open .note{
    opacity:0.4;
    filter:blur(2px);
    pointer-events:none;
  }
  .prose{font-size:1.05rem;line-height:1.7;max-width:65ch;color:var(--c-text)}
  .prose a{
    color:var(--c-accent);
    text-decoration:none;
    border-bottom:2px solid var(--c-accent);
    padding-bottom:1px;
    cursor:pointer;
    transition:all 0.15s ease;
  }
  .prose a:hover{
    color:var(--c-accent-hover);
    background:var(--c-accent-soft);
    border-bottom-color:var(--c-accent-hover);
  }
  .prose h1{font-size:2.4rem;line-height:1.2;margin:.2rem 0 1.5rem;font-weight:700}
  .prose h2{font-size:1.75rem;margin-top:2.5rem;margin-bottom:1rem;font-weight:600}
  .prose h3{font-size:1.35rem;margin-top:2rem;margin-bottom:0.75rem;font-weight:600}
  .prose p{margin:1.25rem 0;line-height:1.75}
  .prose ul,.prose ol{margin:1.25rem 0;padding-left:1.75rem}
  .prose li{margin:0.5rem 0}
  .prose code{
    background:var(--c-bg-soft);
    padding:0.2rem 0.4rem;
    border-radius:var(--c-radius-sm);
    font-size:0.9em;
  }
  .prose blockquote{
    border-left:3px solid var(--c-border);
    padding-left:1rem;
    margin:1.5rem 0;
    color:var(--c-text-muted);
    font-style:italic;
  }
</style>

---
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import Header from '../../components/Header.astro';
import SearchModal from '../../components/SearchModal.astro';
import Footer from '../../components/Footer.astro';
import PlausibleScript from '../../components/PlausibleScript.astro';
import StarredLinksScript from '../../components/StarredLinksScript.astro';
import '../../styles/design-system.css';
import '../../styles/notes.css';

export async function getStaticPaths() {
	const research = await getCollection('research');
	return research.map((entry) => ({
		params: { slug: entry.slug },
		props: { entry },
	}));
}

interface Props {
	entry: CollectionEntry<'research'>;
}

const { entry } = Astro.props;
const { Content } = await entry.render();
const { data } = entry;
const title = data.title;

// Build summary URL from frontmatter
const summaryUrl = `/notes/${data.summaryNote}/`;

// Format word count with comma
const formattedWordCount = data.wordCount.toLocaleString();
---
<html lang="en">
<head>
  <meta charset="utf-8" />
  <title>{title} | Commune Research</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta name="description" content={data.summary || `Deep research: ${title}`} />

  <!-- Open Graph -->
  <meta property="og:title" content={title} />
  <meta property="og:description" content={data.summary || `Deep research: ${title}`} />
  <meta property="og:type" content="article" />
  <meta property="og:url" content={Astro.url} />
  <meta property="og:site_name" content="Commune" />
  <meta property="og:image" content="https://devonmeadows.com/og-image.jpg" />
  <meta property="og:image:width" content="1200" />
  <meta property="og:image:height" content="630" />
  {data.created && <meta property="article:published_time" content={`${data.created}T00:00:00-07:00`} />}
  {data.updated && <meta property="article:modified_time" content={`${data.updated}T00:00:00-07:00`} />}

  <!-- Twitter Card -->
  <meta name="twitter:card" content="summary_large_image" />
  <meta name="twitter:title" content={title} />
  <meta name="twitter:description" content={data.summary || `Deep research: ${title}`} />
  <meta name="twitter:image" content="https://devonmeadows.com/og-image.jpg" />

  <meta name="author" content={data.author} />
  <link rel="icon" type="image/png" href="/favicon-32x32.png" />
  <PlausibleScript domain="devonmeadows.com" />

  <!-- JSON-LD Structured Data: Article + BreadcrumbList -->
  <script type="application/ld+json" set:html={JSON.stringify({
    "@context": "https://schema.org",
    "@graph": [
      {
        "@type": "Article",
        "headline": title,
        "description": data.summary || title,
        "image": "https://devonmeadows.com/og-image.jpg",
        "author": {
          "@type": "Person",
          "name": data.author,
          "url": "https://devonmeadows.com/"
        },
        "datePublished": `${data.created}T00:00:00-07:00`,
        "dateModified": `${data.updated || data.created}T00:00:00-07:00`,
        "wordCount": data.wordCount,
        "url": Astro.url.href,
        "isPartOf": {
          "@id": "https://devonmeadows.com/#website"
        }
      },
      {
        "@type": "BreadcrumbList",
        "itemListElement": [
          {
            "@type": "ListItem",
            "position": 1,
            "name": "Home",
            "item": "https://devonmeadows.com/"
          },
          {
            "@type": "ListItem",
            "position": 2,
            "name": "Summary",
            "item": `https://devonmeadows.com${summaryUrl}`
          },
          {
            "@type": "ListItem",
            "position": 3,
            "name": title,
            "item": Astro.url.href
          }
        ]
      }
    ]
  })} />
</head>
<body>
  <Header />
  <SearchModal />

  <main style="max-width: 65ch; margin: 0 auto; padding: 2rem 1.5rem; min-height: calc(100vh - 200px);">
    <!-- Match atomic notes header exactly -->
    <div class="note-header">
      <div class="note-date">Created {new Date(data.created + 'T00:00:00').toLocaleDateString('en-US', { month: 'long', day: 'numeric', year: 'numeric' })}</div>
      <a href={summaryUrl} class="back-to-summary-link">‚Üê Back to Summary</a>
    </div>

    <article class="prose research-content" style="max-width: none;">
      <Content />
    </article>

    <!-- Research info box (will be moved via JS to appear after h1) -->
    <div class="research-info-box" id="research-info-box">
      <div class="research-badge-header">üìö Deep Research</div>
      <p class="research-intro">{data.context}</p>
      <div class="research-meta-grid">
        <div class="meta-item">
          <span class="meta-label">Generated with:</span>
          <span class="meta-value">{data.aiSource}</span>
        </div>
        <div class="meta-item">
          <span class="meta-label">Model:</span>
          <span class="meta-value">{data.model}</span>
        </div>
        <div class="meta-item">
          <span class="meta-label">Length:</span>
          <span class="meta-value">{formattedWordCount} words</span>
        </div>
      </div>
    </div>

    <!-- Back to top button -->
    <button id="back-to-top" class="back-to-top" aria-label="Back to top">
      ‚Üë
    </button>

    <Footer>
      <div slot="before-footer" class="research-footer-content">
        <a href={summaryUrl} class="footer-back-link">‚Üê Back to Summary</a>
        <p class="footer-context">
          Part of <a href="/">Devon Meadows' working notes</a> ¬∑ Powered by <a href="https://github.com/dmthepm/commune" target="_blank" rel="noopener">Commune</a>
        </p>
      </div>
    </Footer>
  </main>

  <script>
    // Add external link indicators to all external links
    document.addEventListener('DOMContentLoaded', async () => {
      const researchContent = document.querySelector('.research-content');
      if (!researchContent) return;

      // Move info box after h1 title
      const infoBox = document.getElementById('research-info-box');
      const h1 = researchContent.querySelector('h1');
      if (infoBox && h1) {
        h1.after(infoBox);
      }

      // Process wikilinks in info box context
      const contextPara = document.querySelector('.research-intro');
      if (contextPara) {
        try {
          // Fetch backlinks data to resolve wikilink titles to URLs
          const response = await fetch('/backlinks.json');
          const backlinks = await response.json();

          // Build title -> URL lookup
          const titleToUrl = new Map();
          for (const [url, note] of Object.entries(backlinks)) {
            titleToUrl.set(note.title.toLowerCase(), url);
            // Also add aliases
            if (note.aliases) {
              for (const alias of note.aliases) {
                titleToUrl.set(alias.toLowerCase(), url);
              }
            }
          }

          // Process wikilinks [[Title]] in context text
          let html = contextPara.textContent;
          html = html.replace(/\[\[([^\]]+)\]\]/g, (match, title) => {
            const url = titleToUrl.get(title.trim().toLowerCase());
            if (url) {
              return `<a href="${url}" class="wikilink">${title.trim()}</a>`;
            }
            // If not found, just return the title without brackets
            return title.trim();
          });

          contextPara.innerHTML = html;
        } catch (error) {
          console.error('Failed to process wikilinks in context:', error);
        }
      }

      // Wrap tables in scrollable container for mobile
      const tables = researchContent.querySelectorAll('table');
      tables.forEach(table => {
        if (!table.parentElement.classList.contains('table-wrapper')) {
          const wrapper = document.createElement('div');
          wrapper.className = 'table-wrapper';
          table.parentNode.insertBefore(wrapper, table);
          wrapper.appendChild(table);
        }
      });

      // Add hover preview functionality (desktop only) - same as notes pages
      if (window.innerWidth >= 1024) {
        const previewCache = new Map();

        const showPreview = (el, html, x, y) => {
          try {
            let card = document.getElementById('note-hover');
            if(!card){
              card = document.createElement('div');
              card.id = 'note-hover';
              card.style.position = 'fixed';
              card.style.maxWidth = '380px';
              card.style.background = 'var(--c-bg)';
              card.style.boxShadow = 'var(--c-shadow-xl)';
              card.style.border = '1px solid var(--c-border)';
              card.style.borderRadius = 'var(--c-radius-lg)';
              card.style.padding = '1rem 1.2rem';
              card.style.zIndex = 'var(--z-hover)';
              card.style.pointerEvents = 'none';
              document.body.appendChild(card);
            }
            card.innerHTML = html;

            // Viewport-aware positioning
            const padding = 16;
            const offsetFromCursor = 16;

            // Measure card dimensions
            card.style.opacity = '0';
            card.hidden = false;
            const rect = card.getBoundingClientRect();
            const cardWidth = rect.width;
            const cardHeight = rect.height;
            card.style.opacity = '1';

            // Calculate position with edge detection
            let left = x + offsetFromCursor;
            let top = y + offsetFromCursor;

            // Check right edge
            if (left + cardWidth + padding > window.innerWidth) {
              left = x - cardWidth - offsetFromCursor;
              if (left < padding) left = window.innerWidth - cardWidth - padding;
            }
            if (left < padding) left = padding;

            // Check bottom edge
            if (top + cardHeight + padding > window.innerHeight) {
              top = y - cardHeight - offsetFromCursor;
              if (top < padding) top = window.innerHeight - cardHeight - padding;
            }
            if (top < padding) top = padding;

            card.style.left = left + 'px';
            card.style.top = top + 'px';
            card.hidden = false;
          } catch (error) {
            console.error('Error showing hover card:', error);
          }
        };

        const hidePreview = () => {
          try {
            const card = document.getElementById('note-hover');
            if (card) card.hidden = true;
          } catch (error) {
            console.error('Error hiding hover card:', error);
          }
        };

        const handlePreviewHover = async (e) => {
          try {
            const a = e.target?.closest?.('a[href^="/notes/"]');
            if(!a) return;
            const url = a.getAttribute('href');
            if(previewCache.has(url)){
              showPreview(a, previewCache.get(url), e.clientX, e.clientY);
              return;
            }

            // Show immediate loading state
            showPreview(a, '<div style="font-weight:600;color:var(--c-text-muted)">Loading preview...</div>', e.clientX, e.clientY);

            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 2000);

            const r = await fetch(url, {
              signal: controller.signal,
              headers: { 'Accept': 'text/html' }
            });
            clearTimeout(timeoutId);

            if (!r.ok) {
              showPreview(a, '<div style="color:var(--c-text-muted)">Preview unavailable</div>', e.clientX, e.clientY);
              return;
            }

            const t = await r.text();
            const doc = new DOMParser().parseFromString(t, 'text/html');
            const content = doc.querySelector('.pane .pane-content') ?? doc.body;
            const paras = Array.from(content.querySelectorAll('p')).slice(0,3).map(p => p.outerHTML).join('');
            const title = doc.title?.replace(/ \|.*/, '') || 'Untitled';
            const html = `<div style="font-size:1.1rem;font-weight:600;margin-bottom:.5rem;line-height:1.3">${title}</div><div style="font-size:0.85rem;line-height:1.5;color:var(--c-text-accent)">${paras}</div>`;
            previewCache.set(url, html);
            showPreview(a, html, e.clientX, e.clientY);
          } catch (error) {
            if (error.name !== 'AbortError') {
              showPreview(a, '<div style="color:var(--c-text-muted)">Preview failed</div>', e.clientX, e.clientY);
            }
          }
        };

        const handlePreviewLeave = (e) => {
          try {
            const a = e.target?.closest?.('a[href^="/notes/"]');
            if (!a) return;
            hidePreview();
          } catch (error) {
            console.error('Error in preview leave:', error);
          }
        };

        // Add event listeners
        document.addEventListener('mouseenter', handlePreviewHover, true);
        document.addEventListener('mouseleave', handlePreviewLeave, true);
      }

      const links = researchContent.querySelectorAll('a');
      links.forEach(link => {
        const href = link.getAttribute('href');
        if (href && (href.startsWith('http://') || href.startsWith('https://'))) {
          // Check if it's not an internal link
          if (!href.includes('devonmeadows.com')) {
            link.setAttribute('target', '_blank');
            link.setAttribute('rel', 'noopener noreferrer');
          }
        }
      });

      // Back to top button functionality
      const backToTopBtn = document.getElementById('back-to-top');
      if (backToTopBtn) {
        // Show/hide based on scroll position
        window.addEventListener('scroll', () => {
          if (window.scrollY > 500) {
            backToTopBtn.classList.add('visible');
          } else {
            backToTopBtn.classList.remove('visible');
          }
        });

        // Scroll to top on click
        backToTopBtn.addEventListener('click', () => {
          window.scrollTo({
            top: 0,
            behavior: 'smooth'
          });
        });
      }
    });
  </script>

  <StarredLinksScript />
</body>
</html>

<style is:global>
  body {
    background: var(--c-bg);
    color: var(--c-text);
  }

  /* Note header - match atomic notes style exactly */
  .note-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 0.5rem;
  }

  .note-date {
    font-size: 0.85rem;
    color: var(--c-text-muted);
  }

  .back-to-summary-link {
    color: var(--c-accent);
    text-decoration: none;
    font-size: 0.85rem;
    transition: opacity 0.15s ease;
  }

  .back-to-summary-link:hover {
    opacity: 0.7;
  }

  /* Research info box */
  .research-info-box {
    margin: 2rem 0;
    padding: 1.5rem;
    background: var(--c-bg-soft);
    border-left: 3px solid var(--c-accent);
    border-radius: var(--c-radius-md);
  }

  .research-badge-header {
    font-size: 0.85rem;
    font-weight: 600;
    color: var(--c-text);
    margin-bottom: 0.75rem;
  }

  .research-intro {
    margin: 0 0 1rem 0;
    font-size: 0.95rem;
    line-height: 1.6;
    color: var(--c-text);
  }

  .research-intro a {
    color: var(--c-accent);
    text-decoration: none;
    border-bottom: 1px solid var(--c-accent);
  }

  .research-intro a:hover {
    opacity: 0.7;
  }

  .research-intro a.wikilink {
    border-bottom: 1px solid var(--c-accent);
  }

  .research-meta-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1rem;
    margin-top: 1rem;
  }

  .meta-item {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }

  .meta-label {
    font-size: 0.75rem;
    color: var(--c-text-muted);
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .meta-value {
    font-size: 0.9rem;
    color: var(--c-text);
    font-weight: 500;
  }

  @media (max-width: 768px) {
    .research-meta-grid {
      grid-template-columns: 1fr;
      gap: 0.75rem;
    }
  }

  /* Back to top button */
  .back-to-top {
    position: fixed;
    bottom: 2rem;
    right: 2rem;
    width: 3rem;
    height: 3rem;
    border-radius: 50%;
    background: var(--c-bg-soft);
    border: 1px solid var(--c-border);
    color: var(--c-text);
    font-size: 1.2rem;
    cursor: pointer;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
    z-index: 100;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .back-to-top:hover {
    background: var(--c-bg);
    border-color: var(--c-accent);
    color: var(--c-accent);
  }

  .back-to-top.visible {
    opacity: 1;
    visibility: visible;
  }

  /* Footer content */
  .research-footer-content {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    margin-bottom: 2rem;
    padding-top: 2rem;
    border-top: 1px solid var(--c-border);
  }

  .footer-back-link {
    color: var(--c-accent);
    text-decoration: none;
    font-size: 0.9rem;
    transition: opacity 0.15s ease;
  }

  .footer-back-link:hover {
    opacity: 0.7;
  }

  .footer-context {
    font-size: 0.85rem;
    color: var(--c-text-muted);
    margin: 0;
  }

  .footer-context a {
    color: var(--c-accent);
    text-decoration: none;
  }

  .footer-context a:hover {
    opacity: 0.7;
  }

  /* External link indicators */
  .research-content a[target="_blank"]::after {
    content: "‚Üó";
    display: inline-block;
    margin-left: 0.25rem;
    font-size: 0.8em;
    opacity: 0.6;
  }

  /* Research content specific styles */
  .research-content {
    line-height: 1.8;
  }

  .research-content h1 {
    font-size: 2.2rem;
    line-height: 1.2;
    margin-top: 0;
    margin-bottom: 1rem;
  }

  .research-content h2 {
    font-size: 1.6rem;
    margin-top: 3rem;
    margin-bottom: 1rem;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid var(--c-border);
  }

  .research-content h3 {
    font-size: 1.3rem;
    margin-top: 2rem;
    margin-bottom: 0.75rem;
  }

  .research-content h4 {
    font-size: 1.1rem;
    margin-top: 1.5rem;
    margin-bottom: 0.5rem;
  }

  .research-content table {
    width: 100%;
    border-collapse: collapse;
    margin: 1.5rem auto;
    font-size: 0.9rem;
    max-width: max-content;
  }

  .research-content th,
  .research-content td {
    border: 1px solid var(--c-border);
    padding: 0.75rem;
    text-align: left;
  }

  .research-content th {
    background: var(--c-bg-soft);
    font-weight: 600;
  }

  .research-content code {
    background: var(--c-bg-soft);
    padding: 0.2rem 0.4rem;
    border-radius: var(--c-radius-sm);
    font-size: 0.9em;
    font-family: 'Monaco', 'Courier New', monospace;
  }

  .research-content pre {
    background: var(--c-bg-soft);
    padding: 1rem;
    border-radius: var(--c-radius-md);
    overflow-x: auto;
    margin: 1.5rem 0;
  }

  .research-content pre code {
    background: transparent;
    padding: 0;
  }

  .research-content blockquote {
    border-left: 4px solid var(--c-accent);
    padding-left: 1.5rem;
    margin: 1.5rem 0;
    color: var(--c-text-muted);
    font-style: italic;
  }

  .research-content hr {
    border: none;
    border-top: 1px solid var(--c-border);
    margin: 3rem 0;
  }

  .research-content ul,
  .research-content ol {
    margin: 1rem 0;
    padding-left: 2rem;
  }

  .research-content li {
    margin: 0.5rem 0;
    line-height: 1.7;
  }

  /* Responsive adjustments */
  @media (max-width: 1023px) {
    /* Match notes page h1 size on mobile (~30px) */
    .research-content h1 {
      font-size: 1.875rem;
      line-height: 1.25;
    }
  }

  @media (max-width: 768px) {
    /* Smaller table text on mobile */
    .research-content table {
      font-size: 0.8rem;
    }

    .research-content th,
    .research-content td {
      padding: 0.5rem;
    }
  }

  /* Table wrapper for horizontal scroll on mobile */
  .table-wrapper {
    overflow-x: auto;
    margin: 1.5rem 0;
    -webkit-overflow-scrolling: touch; /* Smooth scrolling on iOS */
  }

  .table-wrapper table {
    margin: 0; /* Remove default table margin when inside wrapper */
  }
</style>

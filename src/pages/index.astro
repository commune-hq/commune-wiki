---
import { getEntry } from 'astro:content';
import Header from '../components/Header.astro';
import SearchModal from '../components/SearchModal.astro';
import Backlinks from '../components/Backlinks.astro';
import '../styles/design-system.css';
import '../styles/notes.css';

const entry = await getEntry('notes', 'commune');
if (!entry) throw new Error('Commune note not found');
const { Content } = await entry.render();
const { slug, data } = entry;
const title = data.title ?? slug;
---
<html lang="en">
<head>
  <meta charset="utf-8" />
  <title>{title}</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta name="description" content={data.summary || title} />
  <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
</head>
<body>
  <Header />
  <SearchModal />
  <main id="pane-container">
    <div class="pane" data-url="/notes/commune/" tabindex="-1">
      <button class="close" aria-label="Close" style="display:none">×</button>
      <div class="body-wrapper">
        <div class="body">
          <div class="pane-content">
            <article class="prose">
              <h1>{title}</h1>
              <Content />
            </article>
            <Backlinks slug={`/notes/${slug}/`} title={title} />
          </div>
        </div>
      </div>
    </div>
  </main>
  <script>
    // --- Note Previews (Existing functionality) ---
    const cache = new Map();
    function setupNotePreviews(){
      const show = (el, html, x, y) => {
        let card = document.getElementById('note-hover');
        if(!card){
          card = document.createElement('div');
          card.id = 'note-hover';
          card.style.position = 'fixed';
          card.style.maxWidth = '420px';
          card.style.background = 'var(--c-bg)';
          card.style.boxShadow = 'var(--c-shadow-xl)';
          card.style.border = '1px solid var(--c-border)';
          card.style.borderRadius = 'var(--c-radius-lg)';
          card.style.padding = '1rem 1.2rem';
          card.style.zIndex = 'var(--z-hover)';
          card.style.pointerEvents = 'none';
          document.body.appendChild(card);
        }
        card.innerHTML = html;
        card.style.left = Math.min(x+16, window.innerWidth-460) + 'px';
        card.style.top = Math.min(y+16, window.innerHeight-220) + 'px';
        card.hidden = false;
      };
      const hide = () => {
        const card = document.getElementById('note-hover');
        if (card) card.hidden = true;
      };
      document.addEventListener('mouseover', async (e) => {
        const a = e.target?.closest?.('a[href^="/notes/"]');
        if(!a) return;
        const url = a.getAttribute('href');
        if(cache.has(url)){
          show(a, cache.get(url), e.clientX, e.clientY);
          return;
        }
        try{
          const r = await fetch(url);
          const t = await r.text();
          const doc = new DOMParser().parseFromString(t, 'text/html');
          const body = doc.querySelector('.pane .body') ?? doc.body;
          const paras = Array.from(body.querySelectorAll('p')).slice(0,3).map(p => p.outerHTML).join('');
          const html = `<div style="font-weight:600;margin-bottom:.3rem">${doc.title?.replace(/ \|.*/,'')}</div>${paras}`;
          cache.set(url, html);
          show(a, html, e.clientX, e.clientY);
        }catch{}
      });
      document.addEventListener('mouseout', (e) => {
        const a = e.target?.closest?.('a[href^="/notes/"]');
        if(a) setTimeout(hide, 120);
      });
    }

    // --- New Pane Management Functionality ---
    function setupPanes(){
      const container = document.getElementById('pane-container');
      if (!container) return;

      const normalizeUrl = (url) => new URL(url, window.location.origin).pathname;

      function updateContainerLayout() {
        const panes = container.querySelectorAll('.pane');
        if (panes.length > 1) {
          container.classList.add('multi-pane');
        } else {
          container.classList.remove('multi-pane');
        }
      }

      async function openPane(url) {
        const normalizedUrl = normalizeUrl(url);
        const res = await fetch(url, { headers: { 'Accept': 'text/html;charset=utf-8' } });
        const html = await res.text();
        const doc = new DOMParser().parseFromString(html, 'text/html');
        const fetchedPaneContent = doc.querySelector('.pane .pane-content');
        if (!fetchedPaneContent) return;

        const pane = document.createElement('div');
        pane.className = 'pane';
        pane.dataset.url = normalizedUrl;
        pane.setAttribute('tabindex', '-1');
        pane.innerHTML = `
          <button class="close" aria-label="Close">×</button>
          <div class="body-wrapper">
            <div class="body">
              <div class="pane-content">${fetchedPaneContent.innerHTML}</div>
            </div>
          </div>
        `;
        pane.querySelector('.close').addEventListener('click', (e) => {
          e.stopPropagation();
          closePane(pane);
        });

        container.appendChild(pane);
        updateContainerLayout();
        setTimeout(() => scrollToPane(pane, true), 0);
      }

      function scrollToPane(pane, immediateFocus = false) {
        requestAnimationFrame(() => {
          const active = document.activeElement;
          if (immediateFocus || active !== pane) {
            if (active && active !== pane && active.blur) active.blur();
            pane.focus();
          }
          requestAnimationFrame(() => {
            pane.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'start' });
          });
        });
      }

      function closePane(pane) {
        if (pane === container.firstElementChild) return;
        const previousPane = pane.previousElementSibling;
        pane.remove();
        updateContainerLayout();
        if (previousPane && previousPane.classList.contains('pane')) {
          scrollToPane(previousPane);
          history.replaceState({ pane: previousPane.dataset.url }, '', previousPane.dataset.url);
        }
      }

      container.addEventListener('click', (e) => {
        const clickedPane = e.target?.closest?.('.pane');
        if (clickedPane && document.activeElement !== clickedPane) {
          if (!e.target?.closest('a, button, input, textarea')) {
            scrollToPane(clickedPane);
            history.pushState({ pane: clickedPane.dataset.url }, '', clickedPane.dataset.url);
          }
        }

        const inContent = e.target?.closest?.('article.prose, aside.backlinks');
        if (!inContent) return;
        const a = e.target?.closest?.('a[href^="/notes/"]');
        if (!a) return;
        if (e.ctrlKey || e.metaKey || e.shiftKey) return;
        if (window.innerWidth < 1024) return;
        e.preventDefault();
        const targetUrl = normalizeUrl(a.href);
        openPane(a.href);
        history.pushState({ pane: targetUrl }, '', targetUrl);
      });

      addEventListener('popstate', () => {
        const targetUrl = normalizeUrl(window.location.href);
        const panes = Array.from(container.querySelectorAll('.pane'));
        const targetIndex = panes.findLastIndex(p => p.dataset.url === targetUrl);
        if (targetIndex !== -1) {
          for (let i = panes.length - 1; i > targetIndex; i--) {
            panes[i].remove();
          }
          updateContainerLayout();
          scrollToPane(panes[targetIndex]);
        } else {
          window.location.reload();
        }
      });

      const firstPane = container.querySelector('.pane');
      if (firstPane) {
        firstPane.dataset.url = normalizeUrl(window.location.href);
        firstPane.focus();
      }
    }

    setupNotePreviews();
    setupPanes();
  </script>
</body>
</html>

<style is:global>
  @media (min-width: 1024px) {
    body {
      overflow: hidden;
    }
  }

  :root {
    --pane-width: clamp(480px, 45vw, 700px);
    --collapsed-visible-width: 100px;
    --transition-timing: cubic-bezier(0.22, 1, 0.36, 1);
    --container-padding-h: 5vw;
    --header-height: 64px;
  }

  #pane-container {
    display: flex;
    flex-direction: row;
    align-items: flex-start;
    overflow-x: auto;
    position: absolute;
    top: 64px;
    bottom: 0;
    left: 0;
    right: 0;
    padding: 1.5rem 0;
    padding-left: max(var(--container-padding-h), calc(50vw - var(--pane-width) / 2));
    scroll-behavior: smooth;
    z-index: var(--z-panes);
    transition: padding-left 0.4s var(--transition-timing);
  }

  #pane-container.multi-pane {
    padding-left: var(--container-padding-h);
  }

  #pane-container::-webkit-scrollbar {
    display: none;
  }
  #pane-container {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }

  .pane {
    flex: 0 0 var(--pane-width);
    min-width: 0;
    max-width: var(--pane-width);
    width: var(--pane-width);
    background: var(--c-bg);
    border-radius: var(--c-radius-md);
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2), 0 4px 10px rgba(0, 0, 0, 0.1);
    border: 1px solid var(--c-border);
    height: calc(100vh - var(--header-height) - 3rem);
    overflow: hidden;
    position: relative;
    outline: none;
    margin-right: calc(var(--pane-width) * -1 + var(--collapsed-visible-width));
    transition: margin-right 0.35s var(--transition-timing);
    z-index: 1;
  }

  .pane:hover {
    z-index: 2;
  }

  .pane:focus-within {
    margin-right: 1.5rem;
    border-color: var(--c-accent-border);
    z-index: 3;
  }

  .pane:last-child {
    margin-right: 5vw;
  }

  .pane:first-child {
    box-shadow: none;
    border: none;
    border-radius: 0;
  }

  .pane:first-child .close {
    display: none;
  }

  .pane .body-wrapper {
    height: 100%;
    overflow-y: auto;
    overflow-x: hidden;
  }

  /* Custom scrollbar styling for dark theme */
  .pane .body-wrapper::-webkit-scrollbar {
    width: 8px;
  }
  .pane .body-wrapper::-webkit-scrollbar-track {
    background: var(--c-bg-soft);
  }
  .pane .body-wrapper::-webkit-scrollbar-thumb {
    background: var(--c-border);
    border-radius: 4px;
  }
  .pane .body-wrapper::-webkit-scrollbar-thumb:hover {
    background: var(--c-text-muted);
  }
  .pane .body-wrapper {
    scrollbar-width: thin;
    scrollbar-color: var(--c-border) var(--c-bg-soft);
  }

  .pane .body {
    padding: 2rem 1.5rem;
    max-width: 70ch;
    margin: 0 auto;
  }

  .pane .pane-content {
    /* Wrapper for dynamically loaded content */
  }

  .pane .close {
    position: absolute;
    top: 1rem;
    right: 1rem;
    z-index: 10;
    width: 28px;
    height: 28px;
    background: var(--c-bg-soft);
    border: 1px solid var(--c-border);
    border-radius: 50%;
    padding: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    font-size: 1.2rem;
    line-height: 1;
    color: var(--c-text-muted);
    transition: all 0.15s ease;
    opacity: 0.7;
  }

  .pane .close:hover {
    background: var(--c-bg-muted);
    color: var(--c-text);
    opacity: 1;
  }

  .prose{font-size:1.05rem;line-height:1.7;color:var(--c-text)}
  .prose a{ 
    color:var(--c-accent) !important; 
    text-decoration:none; 
    border-bottom:2px solid var(--c-accent); 
    padding-bottom:1px; 
    transition:all 0.15s ease; 
  }
  .prose a:hover{ 
    color:var(--c-accent-hover) !important; 
    background:var(--c-accent-soft); 
    border-bottom-color:var(--c-accent-hover); 
  }
  .prose h1{font-size:2.4rem;line-height:1.2;margin:.2rem 0 1.5rem;font-weight:700}
  .prose h2{font-size:1.75rem;margin-top:2.5rem;margin-bottom:1rem;font-weight:600}
  .prose h3{font-size:1.35rem;margin-top:2rem;margin-bottom:0.75rem;font-weight:600}
  .prose p{margin:1.25rem 0;line-height:1.75}
  .prose ul,.prose ol{margin:1.25rem 0;padding-left:1.75rem}
  .prose li{margin:0.5rem 0}
  .prose code{
    background:var(--c-bg-soft);
    padding:0.2rem 0.4rem;
    border-radius:var(--c-radius-sm);
    font-size:0.9em;
  }
  .prose blockquote{
    border-left:3px solid var(--c-border);
    padding-left:1rem;
    margin:1.5rem 0;
    color:var(--c-text-muted);
    font-style:italic;
  }

  @media (max-width: 1023px) {
    #pane-container {
      padding: 0;
      flex-direction: column;
      align-items: stretch;
      top: 64px;
      overflow-x: hidden;
    }
    .pane {
      width: 100vw;
      --pane-width: 100vw;
      margin-right: 0 !important;
      height: auto;
      min-height: calc(100vh - 64px);
      box-shadow: none;
      border: none;
      border-radius: 0;
    }
    .pane .body-wrapper {
      height: auto;
      overflow-y: visible;
    }
    .pane .body {
      padding: 2rem 1.5rem;
    }
    .pane:not(:first-child) {
      display: none;
    }
  }
</style>

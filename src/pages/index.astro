---
import { getEntry, getCollection } from 'astro:content';
import Header from '../components/Header.astro';
import SearchModal from '../components/SearchModal.astro';
import Backlinks from '../components/Backlinks.astro';
import BacklinksScript from '../components/BacklinksScript.astro';
import StarredLinksScript from '../components/StarredLinksScript.astro';
import HeaderStarScript from '../components/HeaderStarScript.astro';
import Footer from '../components/Footer.astro';
import PlausibleScript from '../components/PlausibleScript.astro';
import '../styles/design-system.css';
import '../styles/notes.css';

const entry = await getEntry('notes', 'my-working-notes');
if (!entry) throw new Error('Home note not found');
const { Content } = await entry.render();
const { slug, data } = entry;
const title = data.title ?? slug;

// Fetch recent updates for homepage card
const allUpdates = await getCollection('updates');
const recentUpdates = allUpdates
  .sort((a, b) => b.data.date.localeCompare(a.data.date))
  .slice(0, 5);

// Helper function for relative date formatting (Skool-style: today, yesterday, 5d, Aug 12)
function getRelativeDate(dateString: string): string {
  // Parse date in local timezone by appending time
  const date = new Date(dateString + 'T12:00:00');
  const now = new Date();
  const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
  const noteDate = new Date(date.getFullYear(), date.getMonth(), date.getDate());

  const diffTime = today.getTime() - noteDate.getTime();
  const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));

  if (diffDays === 0) return 'today';
  if (diffDays === 1) return '1d';
  if (diffDays < 30) return `${diffDays}d`;

  // For 30+ days, show month and day
  return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
}
---
<html lang="en">
<head>
  <meta charset="utf-8" />
  <title>{title}</title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta name="description" content={data.summary || title} />

  <!-- Open Graph -->
  <meta property="og:title" content={title} />
  <meta property="og:description" content={data.summary || title} />
  <meta property="og:type" content="website" />
  <meta property="og:url" content="https://devonmeadows.com/" />
  <meta property="og:site_name" content="Commune" />
  <meta property="og:image" content="https://devonmeadows.com/og-image.jpg" />
  <meta property="og:image:width" content="1200" />
  <meta property="og:image:height" content="630" />

  <!-- Twitter Card -->
  <meta name="twitter:card" content="summary_large_image" />
  <meta name="twitter:title" content={title} />
  <meta name="twitter:description" content={data.summary || title} />
  <meta name="twitter:image" content="https://devonmeadows.com/og-image.jpg" />

  <!-- Author -->
  <meta name="author" content="Devon Meadows" />

  <link rel="icon" type="image/png" href="/favicon-32x32.png" />
  <PlausibleScript domain="devonmeadows.com" />

  <!-- JSON-LD Structured Data: Article + WebSite + Person -->
  <script type="application/ld+json" set:html={JSON.stringify({
    "@context": "https://schema.org",
    "@graph": [
      {
        "@type": "Article",
        "headline": title,
        "description": data.summary || title,
        "image": "https://devonmeadows.com/og-image.jpg",
        "author": {
          "@type": "Person",
          "name": data.author || 'Devon Meadows',
          "url": "https://devonmeadows.com/"
        },
        "datePublished": `${data.created || data.updated}T00:00:00-07:00`,
        "dateModified": `${data.updated || data.created}T00:00:00-07:00`,
        "url": "https://devonmeadows.com/",
        "isPartOf": {
          "@id": "https://devonmeadows.com/#website"
        }
      },
      {
        "@type": "WebSite",
        "@id": "https://devonmeadows.com/#website",
        "url": "https://devonmeadows.com/",
        "name": "Commune",
        "description": data.summary || "Devon Meadows' working brain in public",
        "author": {
          "@id": "https://devonmeadows.com/#person"
        }
      },
      {
        "@type": "Person",
        "@id": "https://devonmeadows.com/#person",
        "name": "Devon Meadows",
        "url": "https://devonmeadows.com/",
        "description": "Builder of Commune. Dad. Thinker. Tinkerer."
      }
    ]
  })} />
</head>
<body>
  <Header />
  <SearchModal />
  <main id="pane-container">
    <div class="pane" data-url="/notes/commune/" tabindex="-1">
      <button class="close" aria-label="Close" style="display:none">×</button>
      <div class="body-wrapper">
        <div class="body">
          <div class="pane-content">
            <article class="prose">
              {/* Date above title */}
              {(data.updated || data.created) && (
                <div class="note-date"
                     data-date={data.updated || data.created}
                     data-is-updated={data.updated ? 'true' : 'false'}>
                  {(data.updated ? 'Updated ' : 'Created ') + (data.updated || data.created)}
                </div>
              )}

              <h1>{title}</h1>

              <Content />
            </article>

            {/* Two-card layout: Updates + Links to this note */}
            <div class="home-cards">
              {/* Updates card (first on mobile, left on desktop) */}
              <div class="home-card updates-card">
                <h2 class="card-title">Recent updates</h2>
                {recentUpdates.length > 0 ? (
                  <ul class="update-list">
                    {recentUpdates.map((update) => {
                      const relativeDate = getRelativeDate(update.data.date);
                      return (
                        <li class="update-item">
                          <time class="update-item-date">{relativeDate}</time>
                          <a href={`/updates/${update.slug}`} class="update-link">
                            {update.data.title}
                          </a>
                        </li>
                      );
                    })}
                  </ul>
                ) : (
                  <p style="color: var(--c-text-muted); font-size: 0.85rem;">No updates yet.</p>
                )}
                <a href="/updates" class="view-all-link">View all updates →</a>
              </div>

              {/* Links to this note card (second on mobile, right on desktop) */}
              <div class="home-card backlinks-card">
                <Backlinks slug={`/notes/${slug}/`} title={title} />
              </div>
            </div>
          </div>
          <Footer />
        </div>
      </div>
    </div>
  </main>
  <script is:inline>
    // === CLEAN WIKI ARCHITECTURE ===
    // Single initialization, event delegation, no duplicates

    if (window.wikiInitialized) {
      console.log('Wiki already initialized, skipping...');
    } else {
      console.log('Initializing wiki with clean architecture...');

      // Copy the exact same clean architecture from notes pages
      // This ensures consistent behavior across all pages

      // --- Global State ---
      const previewCache = new Map();
      let isInitialized = false;

      // --- Utility Functions ---
      const normalizeUrl = (url) => new URL(url, window.location.origin).pathname;

      const showPreview = (el, html, x, y) => {
        try {
          let card = document.getElementById('note-hover');
          if(!card){
            card = document.createElement('div');
            card.id = 'note-hover';
            card.style.position = 'fixed';
            card.style.maxWidth = '380px';
            card.style.background = 'var(--c-bg)';
            card.style.boxShadow = 'var(--c-shadow-xl)';
            card.style.border = '1px solid var(--c-border)';
            card.style.borderRadius = 'var(--c-radius-lg)';
            card.style.padding = '1rem 1.2rem';
            card.style.zIndex = 'var(--z-hover)';
            card.style.pointerEvents = 'none';
            document.body.appendChild(card);
          }
          card.innerHTML = html;

          // Viewport-aware positioning
          const padding = 16;
          const offsetFromCursor = 16;

          // Measure card dimensions
          card.style.opacity = '0';
          card.hidden = false;
          const rect = card.getBoundingClientRect();
          const cardWidth = rect.width;
          const cardHeight = rect.height;
          card.style.opacity = '1';

          // Calculate position with edge detection
          let left = x + offsetFromCursor;
          let top = y + offsetFromCursor;

          // Check right edge
          if (left + cardWidth + padding > window.innerWidth) {
            left = x - cardWidth - offsetFromCursor;
            if (left < padding) left = window.innerWidth - cardWidth - padding;
          }
          if (left < padding) left = padding;

          // Check bottom edge
          if (top + cardHeight + padding > window.innerHeight) {
            top = y - cardHeight - offsetFromCursor;
            if (top < padding) top = window.innerHeight - cardHeight - padding;
          }
          if (top < padding) top = padding;

          card.style.left = left + 'px';
          card.style.top = top + 'px';
          card.hidden = false;
        } catch (error) {
          console.error('Error showing hover card:', error);
        }
      };

      const hidePreview = () => {
        try {
          const card = document.getElementById('note-hover');
          if (card) card.hidden = true;
        } catch (error) {
          console.error('Error hiding hover card:', error);
        }
      };
      // Copy the exact same clean architecture from notes pages
      // [Rest of the clean architecture will be added in next edit]

      // --- Preview Event Handler ---
      const handlePreviewHover = async (e) => {
        try {
          const a = e.target?.closest?.('a[href^="/notes/"]');
          if(!a) return;
          const url = a.getAttribute('href');
          if(previewCache.has(url)){
            showPreview(a, previewCache.get(url), e.clientX, e.clientY);
            return;
          }

          showPreview(a, '<div style="font-weight:600;color:var(--c-text-muted)">Loading preview...</div>', e.clientX, e.clientY);

          const controller = new AbortController();
          const timeoutId = setTimeout(() => controller.abort(), 2000);

          const r = await fetch(url, {
            signal: controller.signal,
            headers: { 'Accept': 'text/html' }
          });
          clearTimeout(timeoutId);

          if (!r.ok) {
            showPreview(a, '<div style="color:var(--c-text-muted)">Preview unavailable</div>', e.clientX, e.clientY);
            return;
          }

          const t = await r.text();
          const doc = new DOMParser().parseFromString(t, 'text/html');
          const content = doc.querySelector('.pane .pane-content') ?? doc.body;
          const paras = Array.from(content.querySelectorAll('p')).slice(0,3).map(p => p.outerHTML).join('');
          const title = doc.title?.replace(/ \|.*/, '') || 'Untitled';
          const html = `<div style="font-size:1.1rem;font-weight:600;margin-bottom:.5rem;line-height:1.3">${title}</div><div style="font-size:0.85rem;line-height:1.5;color:var(--c-text-accent)">${paras}</div>`;
          previewCache.set(url, html);
          showPreview(a, html, e.clientX, e.clientY);
        } catch (error) {
          if (error.name !== 'AbortError') {
            showPreview(a, '<div style="color:var(--c-text-muted)">Preview failed</div>', e.clientX, e.clientY);
          }
        }
      };

      const handlePreviewLeave = (e) => {
        try {
          const a = e.target?.closest?.('a[href^="/notes/"]');
          if(a) setTimeout(hidePreview, 100);
        } catch (error) {
          console.error('Error in mouseleave handler:', error);
        }
      };

      // --- Pane Management Functions ---
      const container = document.getElementById('pane-container');
      if (!container) {
        console.error('Pane container not found!');
      } else {

      const updateContainerLayout = () => {
        const paneCount = container.querySelectorAll('.pane').length;
        container.classList.toggle('multi-pane', paneCount > 1);
      };

      const openPane = async (url) => {
        try {
          console.log(`Opening pane for: ${url}`);
          const normalizedUrl = normalizeUrl(url);

          // Check for existing pane to prevent duplicates
          const existingPane = container.querySelector(`[data-url="${normalizedUrl}"]`);
          if (existingPane) {
            console.log('Pane already exists, focusing existing pane');
            focusPane(existingPane);
            return;
          }

          // Fetch content
          const controller = new AbortController();
          const timeoutId = setTimeout(() => controller.abort(), 10000);

          const res = await fetch(url, {
            headers: { 'Accept': 'text/html;charset=utf-8' },
            signal: controller.signal
          });
          clearTimeout(timeoutId);

          if (!res.ok) {
            console.error(`Failed to fetch pane content: ${res.status}`);
            return;
          }

          const html = await res.text();
          const doc = new DOMParser().parseFromString(html, 'text/html');
          const fetchedContent = doc.querySelector('.pane .pane-content');

          if (!fetchedContent) {
            console.error('No .pane-content found in fetched page');
            return;
          }

          // Create new pane
          const pane = document.createElement('div');
          pane.className = 'pane';
          pane.dataset.url = normalizedUrl;
          pane.setAttribute('tabindex', '-1');

          pane.innerHTML = `
              <button class="close" aria-label="Close">×</button>
              <div class="body-wrapper">
                  <div class="body">
                      <div class="pane-content">${fetchedContent.innerHTML}</div>
                  </div>
              </div>
          `;

          // Attach close listener
          pane.querySelector('.close').addEventListener('click', (e) => {
              e.stopPropagation();
              closePane(pane);
          });

          // Append and focus
          container.appendChild(pane);
          void pane.offsetHeight;
          updateContainerLayout();

          // Initialize backlinks, starred links, and header star for the new pane
          if (typeof window.initializeBacklinks === 'function') {
            window.initializeBacklinks(pane);
          }
          if (typeof window.initializeStarredLinks === 'function') {
            window.initializeStarredLinks(pane);
          }
          if (typeof window.initializeHeaderStar === 'function') {
            window.initializeHeaderStar(pane);
          }
          // Update relative dates for the new pane
          if (typeof window.updateRelativeDates === 'function') {
            window.updateRelativeDates();
          }

          setTimeout(() => focusPane(pane), 0);
          console.log('Pane opened successfully');
        } catch (error) {
          console.error('Error opening pane:', error);
          if (error.name !== 'AbortError') {
            window.location.href = url;
          }
        }
      };

      const focusPane = (pane) => {
        requestAnimationFrame(() => {
          if (document.activeElement && document.activeElement !== pane && document.activeElement.blur) {
            document.activeElement.blur();
          }
          pane.focus({ preventScroll: true });
          // Only scroll pane into view on desktop (>= 1024px)
          // On mobile, panes fill the viewport so scrollIntoView is not needed
          if (window.innerWidth >= 1024) {
            requestAnimationFrame(() => {
              pane.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'start' });
            });
          }
        });
      };

      const closePane = (pane) => {
        if (pane === container.firstElementChild) return;
        const previousPane = pane.previousElementSibling;
        pane.remove();
        updateContainerLayout();
        if (previousPane && previousPane.classList.contains('pane')) {
          focusPane(previousPane);
          if (previousPane.dataset.url) {
            history.replaceState({ pane: previousPane.dataset.url }, '', previousPane.dataset.url);
          }
        }
      };

      // --- Single Event Delegation Handler ---
      const handleWikiClick = (e) => {
        // Handle link clicks within content
        const inContent = e.target?.closest?.('article.prose, aside.backlinks');
        if (inContent) {
          const a = e.target?.closest?.('a[href^="/notes/"]');
          if (a) {
            // Don't intercept if modifier keys are pressed
            if (e.ctrlKey || e.metaKey || e.shiftKey) return;

            // On desktop (>= 1024px), intercept. On mobile, allow normal navigation.
            if (window.innerWidth < 1024) return;

            // Intercept the link and open in a pane!
            e.preventDefault();
            const targetUrl = normalizeUrl(a.href);

            openPane(a.href);
            history.pushState({ pane: targetUrl }, '', targetUrl);
            return;
          }
        }

        // Handle pane focusing (only if we didn't handle a content link)
        if (e.target?.closest('a, button, input, textarea')) {
          return;
        }

        const clickedPane = e.target?.closest?.('.pane');
        if (clickedPane && document.activeElement !== clickedPane) {
          focusPane(clickedPane);
          if (clickedPane.dataset.url) {
            history.pushState({ pane: clickedPane.dataset.url }, '', clickedPane.dataset.url);
          }
        }
      };

      // Handle popstate (browser history navigation)
      const handlePopstate = () => {
        const targetUrl = normalizeUrl(window.location.href);
        const panes = Array.from(container.querySelectorAll('.pane'));
        const targetIndex = panes.findLastIndex(p => p.dataset.url === targetUrl);

        if (targetIndex !== -1) {
          for (let i = panes.length - 1; i > targetIndex; i--) {
            panes[i].remove();
          }
          updateContainerLayout();
          focusPane(panes[targetIndex]);
        } else {
          window.location.reload();
        }
      };

      // Initialize the first pane
      const firstPane = container.querySelector('.pane');
      if (firstPane) {
        firstPane.dataset.url = normalizeUrl(window.location.href);
        focusPane(firstPane);
        updateContainerLayout();
      }

      // --- SINGLE EVENT DELEGATION SETUP ---
      // Remove any existing listeners to prevent duplicates
      document.removeEventListener('mouseenter', handlePreviewHover, true);
      document.removeEventListener('mouseleave', handlePreviewLeave, true);
      container.removeEventListener('click', handleWikiClick);
      window.removeEventListener('popstate', handlePopstate);

      // Add hover preview listeners ONLY on desktop (>= 1024px)
      // This prevents the brief preview flash on mobile/tablet when tapping links
      if (window.innerWidth >= 1024) {
        document.addEventListener('mouseenter', handlePreviewHover, true);
        document.addEventListener('mouseleave', handlePreviewLeave, true);
      }

      // Add navigation listeners on all devices
      container.addEventListener('click', handleWikiClick);
      window.addEventListener('popstate', handlePopstate);

      // Mark as successfully initialized
      window.wikiInitialized = true;
      console.log('Wiki initialized with clean architecture');
      } // Close the else block for container check
    }


  </script>

  <script is:inline>
    // Fix timezone issue: Recalculate dates client-side
    // Make it globally available so panes can use it
    window.updateRelativeDates = function() {
      document.querySelectorAll('.note-date[data-date]').forEach(el => {
        const dateString = el.dataset.date;
        if (!dateString) return;

        const isUpdated = el.dataset.isUpdated === 'true';
        const prefix = isUpdated ? 'Updated ' : 'Created ';

        const date = new Date(dateString + 'T12:00:00');
        const now = new Date();
        const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
        const noteDate = new Date(date.getFullYear(), date.getMonth(), date.getDate());

        const diffTime = today.getTime() - noteDate.getTime();
        const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));

        let relativeText = '';
        if (diffDays === 0) relativeText = 'today';
        else if (diffDays === 1) relativeText = 'yesterday';
        else if (diffDays < 7) relativeText = `${diffDays} days ago`;
        else if (diffDays < 14) relativeText = '1 week ago';
        else if (diffDays < 30) relativeText = `${Math.floor(diffDays / 7)} weeks ago`;
        else if (diffDays < 60) relativeText = '1 month ago';
        else relativeText = date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });

        el.textContent = prefix + relativeText;
      });
    };

    // Run on page load
    window.updateRelativeDates();
  </script>

  <BacklinksScript />
  <StarredLinksScript />
  <HeaderStarScript />
</body>
</html>

<style is:global>
  @media (min-width: 1024px) {
    body {
      overflow: hidden;
    }
  }

  :root {
    --pane-width: clamp(480px, 45vw, 700px);
    --collapsed-visible-width: 100px;
    --transition-timing: cubic-bezier(0.22, 1, 0.36, 1);
    --container-padding-h: 5vw;
    --header-height: 64px;
  }

  #pane-container {
    display: flex;
    flex-direction: row;
    align-items: flex-start;
    overflow-x: auto;
    position: absolute;
    top: 64px;
    bottom: 0;
    left: 0;
    right: 0;
    padding: 1.5rem 0;
    padding-left: max(var(--container-padding-h), calc(50vw - var(--pane-width) / 2));
    scroll-behavior: smooth;
    z-index: var(--z-panes);
    transition: padding-left 0.4s var(--transition-timing);
  }

  #pane-container.multi-pane {
    padding-left: var(--container-padding-h);
  }

  #pane-container::-webkit-scrollbar {
    display: none;
  }
  #pane-container {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }

  .pane {
    flex: 0 0 var(--pane-width);
    min-width: 0;
    max-width: var(--pane-width);
    width: var(--pane-width);
    background: var(--c-bg);
    border-radius: var(--c-radius-md);
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2), 0 4px 10px rgba(0, 0, 0, 0.1);
    border: 1px solid var(--c-border);
    height: calc(100vh - var(--header-height) - 3rem);
    overflow: hidden;
    position: relative;
    outline: none;
    margin-right: calc(var(--pane-width) * -1 + var(--collapsed-visible-width));
    transition: margin-right 0.35s var(--transition-timing);
    z-index: 1;
  }

  .pane:hover {
    z-index: 2;
  }

  .pane:focus-within {
    margin-right: 1.5rem;
    border-color: var(--c-accent-border);
    z-index: 3;
  }

  .pane:last-child {
    margin-right: 5vw;
  }

  .pane:first-child {
    box-shadow: none;
    border: none;
    border-radius: 0;
  }

  .pane:first-child .close {
    display: none;
  }

  .pane .body-wrapper {
    height: 100%;
    overflow-y: auto;
    overflow-x: hidden;
  }

  /* Custom scrollbar styling for dark theme */
  .pane .body-wrapper::-webkit-scrollbar {
    width: 8px;
  }
  .pane .body-wrapper::-webkit-scrollbar-track {
    background: var(--c-bg-soft);
  }
  .pane .body-wrapper::-webkit-scrollbar-thumb {
    background: var(--c-border);
    border-radius: 4px;
  }
  .pane .body-wrapper::-webkit-scrollbar-thumb:hover {
    background: var(--c-text-muted);
  }
  .pane .body-wrapper {
    scrollbar-width: thin;
    scrollbar-color: var(--c-border) var(--c-bg-soft);
  }

  .pane .body {
    padding: 2rem 1.5rem;
    max-width: 70ch;
    margin: 0 auto;
  }

  .pane .pane-content {
    /* Wrapper for dynamically loaded content */
  }

  .pane .close {
    position: absolute;
    top: 1rem;
    right: 1rem;
    z-index: 10;
    width: 28px;
    height: 28px;
    background: var(--c-bg-soft);
    border: 1px solid var(--c-border);
    border-radius: 50%;
    padding: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    font-size: 1.2rem;
    line-height: 1;
    color: var(--c-text-muted);
    transition: all 0.15s ease;
    opacity: 0.7;
  }

  .pane .close:hover {
    background: var(--c-bg-muted);
    color: var(--c-text);
    opacity: 1;
  }

  .prose{font-size:1.05rem;line-height:1.7;color:var(--c-text)}
  .prose a{ 
    color:var(--c-accent) !important; 
    text-decoration:none; 
    border-bottom:2px solid var(--c-accent); 
    padding-bottom:1px; 
    transition:all 0.15s ease; 
  }
  .prose a:hover{ 
    color:var(--c-accent-hover) !important; 
    background:var(--c-accent-soft); 
    border-bottom-color:var(--c-accent-hover); 
  }
  /* Date above title - more muted */
  .note-date {
    font-size: 0.875rem;
    color: rgba(156, 163, 175, 0.7); /* More subtle gray */
    margin-bottom: 0.5rem;
    font-variant-numeric: tabular-nums;
  }

  .prose h1{
    font-size:2.4rem;
    line-height:1.2;
    margin:0 0 1.5rem;
    font-weight:700;
  }

  /* First paragraph after title - tighter spacing */
  .prose h1 + p,
  .prose h1 + ul,
  .prose h1 + ol {
    margin-top: 0;
  }
  .prose h2{font-size:1.75rem;margin-top:2.5rem;margin-bottom:1rem;font-weight:600}
  .prose h3{font-size:1.35rem;margin-top:2rem;margin-bottom:0.75rem;font-weight:600}
  .prose p{margin:1.25rem 0;line-height:1.75}

  /* Note metadata bar (status badge + dates) */
  .note-meta {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 2rem;
    font-size: 0.9rem;
    color: var(--c-text-muted);
  }

  .status-badge {
    padding: 0.25rem 0.75rem;
    border-radius: 9999px;
    font-size: 0.75rem;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .status-draft {
    background: var(--c-bg-soft);
    color: var(--c-text-muted);
  }

  .status-live {
    background: rgba(34, 197, 94, 0.1);
    color: rgb(22, 163, 74);
  }

  .status-updated {
    background: rgba(59, 130, 246, 0.1);
    color: rgb(37, 99, 235);
  }

  .meta-date {
    font-variant-numeric: tabular-nums;
  }
  .prose ul,.prose ol{margin:1.25rem 0;padding-left:1.75rem}
  .prose li{margin:0.5rem 0}
  .prose code{
    background:var(--c-bg-soft);
    padding:0.2rem 0.4rem;
    border-radius:var(--c-radius-sm);
    font-size:0.9em;
  }
  .prose blockquote{
    border-left:3px solid var(--c-border);
    padding-left:1rem;
    margin:1.5rem 0;
    color:var(--c-text-muted);
    font-style:italic;
  }

  /* Homepage Cards Layout */
  .home-cards {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1.5rem;
    margin-top: 3rem;
    margin-bottom: 3rem;
  }

  .home-card {
    background: var(--c-bg-soft);
    border: 1px solid var(--c-border);
    border-radius: var(--c-radius-md);
    padding: 1.5rem;
    transition: border-color 0.15s ease;
  }

  .home-card:hover {
    border-color: var(--c-accent-border);
  }

  .card-title {
    font-size: 0.95rem;
    font-weight: 600;
    margin: 0 0 0.75rem 0;
    color: var(--c-text);
  }

  .update-list,
  .backlink-list {
    list-style: none;
    padding: 0;
    margin: 0 0 0.75rem 0;
    display: flex;
    flex-direction: column;
    gap: 0.6rem;
  }

  .update-item,
  .backlink-item {
    display: flex;
    align-items: baseline;
    gap: 0.6rem;
  }

  .update-item-date {
    font-size: 0.75rem;
    color: var(--c-text-muted);
    min-width: 55px;
    font-variant-numeric: tabular-nums;
  }

  .update-link {
    color: var(--c-text) !important;
    text-decoration: none;
    border-bottom: none !important;
    transition: color 0.15s ease;
    flex: 1;
    font-size: 0.85rem;
  }

  .update-link:hover {
    color: var(--c-accent) !important;
  }

  .backlink-link {
    color: var(--c-text) !important;
    text-decoration: none;
    border-bottom: none !important;
    transition: color 0.15s ease;
    flex: 1;
    font-size: 0.85rem;
  }

  .backlink-link:hover {
    color: var(--c-accent) !important;
  }

  .view-all-link {
    display: inline-block;
    color: var(--c-accent) !important;
    text-decoration: none;
    font-size: 0.8rem;
    border-bottom: 1px solid transparent !important;
    transition: border-color 0.15s ease;
  }

  .view-all-link:hover {
    border-bottom-color: var(--c-accent) !important;
  }

  /* Make backlinks title match Updates card title exactly */
  .backlinks-card aside.backlinks h4 {
    font-size: 0.95rem !important;
    font-weight: 600 !important;
    margin: 0 0 0.75rem 0 !important;
    color: var(--c-text) !important;
  }

  /* Remove top border and padding from backlinks in card */
  .backlinks-card aside.backlinks {
    margin-top: 0 !important;
    padding-top: 0 !important;
    border-top: none !important;
  }

  .backlinks-card aside.backlinks ul {
    gap: 0.6rem;
  }

  .backlinks-card aside.backlinks a {
    font-size: 0.85rem;
  }

  @media (max-width: 1023px) {
    .prose h1 {
      font-size: 1.875rem;
      line-height: 1.25;
    }

    /* Stack cards on mobile: Updates first, Related Notes second */
    .home-cards {
      grid-template-columns: 1fr;
      gap: 1rem;
    }

    #pane-container {
      position: static;
      padding: 0;
      flex-direction: column;
      align-items: stretch;
      overflow-x: hidden;
    }
    .pane {
      width: 100vw;
      --pane-width: 100vw;
      margin-right: 0 !important;
      height: auto;
      overflow: visible;
      box-shadow: none;
      border: none;
      border-radius: 0;
    }
    .pane .body-wrapper {
      height: auto;
      overflow: visible;
    }
    .pane .body {
      padding: 2rem 1.5rem;
    }
    .pane:not(:first-child) {
      display: none;
    }
  }
</style>

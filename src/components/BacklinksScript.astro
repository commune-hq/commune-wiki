<script is:inline>
// === BACKLINKS INITIALIZATION ===
// Handles dynamic backlinks loading for both static and dynamically loaded panes

(function() {
  let backlinksData = null;

  async function initializeBacklinks(scope = document) {
    try {
      // Fetch backlinks data if not already loaded
      if (!backlinksData) {
        const res = await fetch('/backlinks.json');
        if (res.ok) {
          backlinksData = await res.json();
        } else {
          console.warn('Failed to load backlinks.json');
          return;
        }
      }

      // Find all backlinks sections within the scope
      const backlinksSections = scope.querySelectorAll('.backlinks');

      backlinksSections.forEach(section => {
        const slug = section.dataset.backlinksFor;
        if (!slug) return;

        const list = section.querySelector('.backlinks-list');
        if (!list) return;

        // Get backlinks for this slug
        const here = slug.endsWith('/') ? slug : slug + '/';
        const rec = backlinksData?.[here];
        const items = rec?.inbound ?? [];

        if (!items.length) {
          // Hide the entire section if no backlinks
          section.classList.add('hidden');
          return;
        }

        // Show the section and populate links
        section.classList.remove('hidden');

        // Update heading with count (unless hideCount attribute is present)
        const heading = section.querySelector('h4');
        const hideCount = section.hasAttribute('data-hide-count');
        if (heading && !hideCount) {
          const count = items.length;
          const linkText = count === 1 ? 'link' : 'links';
          heading.textContent = `${count} ${linkText} to this note`;
        }

        const titleFor = (u) => {
          const note = backlinksData[u];
          return note?.title || u.split('/').filter(Boolean).pop()?.replace(/-/g,' ');
        };

        // Render links and then add stars as separate clickable elements
        list.innerHTML = items.map(s => `<li><a href="${s}">${titleFor(s)}</a></li>`).join('');

        // Add stars to starred notes
        list.querySelectorAll('li').forEach((li, index) => {
          const url = items[index];
          const note = backlinksData[url];

          if (note?.isStarred && !li.querySelector('.star-indicator-inline')) {
            const link = li.querySelector('a');
            if (link) {
              const star = document.createElement('span');
              star.className = 'star-indicator-inline';
              star.textContent = ' ⭐';
              star.setAttribute('aria-label', 'Top 5% most linked - click to learn more');
              star.setAttribute('role', 'button');
              star.setAttribute('tabindex', '0');

              // Click handler to open modal
              star.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                if (typeof window.showStarModal === 'function') {
                  window.showStarModal();
                }
              });

              // Keyboard support
              star.addEventListener('keydown', (e) => {
                if (e.key === 'Enter' || e.key === ' ') {
                  e.preventDefault();
                  e.stopPropagation();
                  if (typeof window.showStarModal === 'function') {
                    window.showStarModal();
                  }
                }
              });

              link.insertAdjacentElement('afterend', star);
            }
          }
        });
      });
    } catch (error) {
      console.error('Error initializing backlinks:', error);
    }
  }

  // Make it globally available for dynamic pane loading
  window.initializeBacklinks = initializeBacklinks;

  // Auto-initialize on DOM ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => initializeBacklinks());
  } else {
    initializeBacklinks();
  }
})();
</script>

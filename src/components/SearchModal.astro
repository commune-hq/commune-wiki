---
interface Result { url: string; title: string; excerpt?: string; score?: number; source?: 'pagefind'|'semantic'; }
---
<div id="commune-search" hidden>
  <div class="shade" onclick="window.CommuneSearch.close()"></div>
  <div class="modal" role="dialog" aria-modal="true">
    <input id="q" placeholder="Search notes & docs… (Esc to close)" autofocus />
    <ul id="results"></ul>
  </div>
</div>

<style>
  #commune-search[hidden]{display:none}
  .shade{position:fixed;inset:0;background:rgba(0,0,0,.35);z-index:97}
  .modal{position:fixed;inset:auto;left:50%;top:12vh;transform:translateX(-50%);
    width:min(880px,90vw);background:var(--sl-color-bg, #fff);border-radius:12px;padding:1rem;
    box-shadow:0 20px 60px rgba(0,0,0,.25);z-index:98;box-sizing:border-box}
  #q{width:100%;font-size:1.05rem;padding:.75rem 1rem;border-radius:.6rem;border:1px solid rgba(0,0,0,.1);outline:none;box-sizing:border-box}
  #results{list-style:none;margin:.8rem 0 .4rem;padding:0;max-height:60vh;overflow:auto}
  #results li{padding:.65rem .5rem;border-radius:.5rem;cursor:pointer}
  #results li:hover{background:rgba(0,0,0,.04)}
  #results a{text-decoration:none;color:inherit;font-weight:500}
  #results .meta{display:flex;gap:.35rem;align-items:center;margin-top:.2rem}
  .src{font-size:.75rem;opacity:.6}
  #results div{font-size:.85rem;opacity:.75;margin-top:.25rem}
</style>

<script is:inline>
  // Lightweight RRF combiner
  const rrf = (lists) => {
    const map = new Map();
    lists.forEach((arr, idx) => arr.forEach((r, i) => {
      const key = r.url;
      const cur = map.get(key) ?? { ...r, score: 0 };
      cur.score += 1 / (60 + i);
      map.set(key, cur);
    }));
    return Array.from(map.values()).sort((a,b) => b.score - a.score);
  };

  async function ensurePagefind(){
    if (window.__pagefind) return window.__pagefind;
    try {
      const pf = await import('/_pagefind/pagefind.js');
      window.__pagefind = await pf?.pagefind?.init();
    } catch (_) { window.__pagefind = { search: async () => ({ results: [] }) }; }
    return window.__pagefind;
  }

  async function doPagefind(query){
    const pf = await ensurePagefind();
    const res = await pf.search(query);
    const detailed = await Promise.all(res.results.slice(0,20).map(r => r.data()));
    return detailed.map(d => ({ url: d.url, title: d.meta?.title ?? d.url, excerpt: d.excerpt, source:'pagefind' }));
  }

  async function doSemantic(query){
    try{
      const r = await fetch(`/api/ask?q=${encodeURIComponent(query)}`);
      if (!r.ok) return [];
      const j = await r.json();
      return (j.results ?? []).slice(0,10).map(x => ({ url: x.url, title: x.title, excerpt: x.snippet, source:'semantic' }));
    }catch{ return []; }
  }

  // DEV fallback: use backlinks graph as minimal search index
  async function devIndex() {
    try {
      const r = await fetch('/backlinks.json', { cache: 'no-store' });
      if (!r.ok) return [];
      const graph = await r.json();
      return Object.entries(graph).map(([url, node]) => ({
        url, title: node.title || url, excerpt: (node.summary || '').slice(0, 160)
      }));
    } catch { return []; }
  }

  async function doDevSearch(q) {
    const idx = await devIndex();
    if (!q) return [];
    const norm = q.toLowerCase();
    const scored = idx.map(d => {
      const hay = `${d.title} ${d.excerpt}`.toLowerCase();
      const pos = hay.indexOf(norm);
      return pos === -1 ? null : { ...d, score: 1 / (1 + pos) };
    }).filter(Boolean).sort((a,b) => b.score - a.score);
    return scored.slice(0, 20).map(d => ({ url: d.url, title: d.title, excerpt: d.excerpt, source: 'pagefind' }));
  }

  // Wire up modal
  (function mountSearch(){
    const root = document.getElementById('commune-search');
    const input = root.querySelector('#q');
    const list  = root.querySelector('#results');

    function render(results) {
      list.innerHTML = results.map(r => (
        `<li>
          <div class="meta">
            <a href="${r.url}">${r.title}</a>
            ${r.source ? `<span class="src">• ${r.source}</span>` : ''}
          </div>
          ${r.excerpt ? `<div>${r.excerpt}</div>` : ''}
        </li>`
      )).join('');
      // Wire close on click
      list.querySelectorAll('a').forEach(a => a.onclick = () => window.CommuneSearch.close());
    }

    let t;
    async function search(q) {
      const [lex, sem] = await Promise.all([
        doPagefind(q).catch(() => []),
        doSemantic(q).catch(() => []),
      ]);
      let merged = rrf([lex, sem]);
      if (!merged.length) merged = await doDevSearch(q);
      render(merged);
    }

    function open() {
      root.hidden = false;
      document.body.classList.add('modal-open');
      input.value = '';
      render([]);
      input.focus();
    }
    function close() {
      root.hidden = true;
      document.body.classList.remove('modal-open');
    }
    window.CommuneSearch = { open, close };

    addEventListener('commune:openSearch', open);
    addEventListener('keydown', e => {
      const mac = navigator.platform.toUpperCase().includes('MAC');
      if ((mac ? e.metaKey : e.ctrlKey) && e.key.toLowerCase() === 'k') {
        e.preventDefault(); open();
      }
      if (e.key === 'Escape' && !root.hidden) close();
    });

    input.addEventListener('input', () => {
      clearTimeout(t);
      const q = input.value.trim();
      t = setTimeout(() => search(q), 200);
    });

    // Enter → first result
    input.addEventListener('keydown', (e) => {
      if (e.key === 'Enter') {
        const first = list.querySelector('li a');
        if (first) window.location.href = first.getAttribute('href');
      }
    });
  })();
</script>
